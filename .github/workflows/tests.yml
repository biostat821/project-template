name: tests

on:
  pull_request:

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.8

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Run pytest
      run: |
        if [ -d tests/ ]; then
          source venv/bin/activate
          code=$(
            coverage run --rcfile=.github/workflows/.coveragerc --source=src/ -m pytest tests/ > test_report
            echo $?
          )
          status=
          if [[ code = 0 ]]; then status=success; else status=failure; fi
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f state="$status" \
            -f context='tests' \
            -f description="Test status: $status"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create coverage comment
      run: |
        if [ -f .coverage ]; then
          source venv/bin/activate
          REPORT=$'```\n'
          REPORT+=$(coverage report -m)
          REPORT+=$'\n```'
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
            -f body="$REPORT"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check coverage
      run: |
        # Fetch enough history for a common merge-base commit
        git fetch origin ${{ github.event.pull_request.head.ref }} --depth $(( ${{ github.event.pull_request.commits }} + 1 ))
        # Fetch is smart enough to keep commits fetched minimal if it finds local history already has a commit from the base branch:
        git fetch origin ${{ github.event.pull_request.base.ref }}
        source venv/bin/activate
        .github/workflows/diff_coverage.sh \
        ${{ github.event.pull_request.base.sha }} \
        ${{ github.event.pull_request.head.sha }}
